[user]
	name = Anthony Tabion
	email = anthony.tabion@tradingtechnologies.com
[core]
	editor = emacs
    packedGitLimit = 512m
    packedGitWindowSize = 512m
    bigFileThreshold = 256m
[alias]
    glog = log --graph --date-order --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
    myglog = log --graph --date-order --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative --author=\"YOUR NAME\"
    cpu = "!f() { git checkout $1 && git pull && git submodule update --recursive; }; f"
    su = "submodule update --recursive"
    pu = "!f() { git pull && git submodule update --recurseive }; f"
    st = status
    co = checkout
    br = branch
    rb = "!f() { git push origin :$1 && git branch -D $1; }; f"

    hash = "rev-parse --short HEAD"

#    com = cpu master
#    cou = cpu uat/current
#    cor = cpu release/current
#    cod = cpu develop
    
    mergeup    = "!f() { git cpu master && git cpu uat/current && git merge master && git cpu release/current && git merge uat/current && git cpu develop && git merge release/current; }; f"
    pushall    = "!f() { git cpu master && git push origin master && git cpu uat/current && git push origin uat/current && git cpu release/current && git push origin release/current && git cpu develop && git push origin develop; }; f"
    restoreall = "!f() { git cpu master && git reset --hard origin/master; }; f"
    refresh    = "!f() { git pull && git submodule update; }; f"
    test       = "!f() { git checkout $1 && git submodule ext; }; f"    
[color]
	diff = true
	log = true
[gc]
    auto = 0
[pack]
    deltaCacheSize = 256m
    windowMemory = 256m
	threads = 4

